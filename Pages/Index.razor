@page "/"
@using Taboo.Data
@using System.Timers
@inject WordGeneration wordGeneration
@inject CountdownTimer CountdownTimer
@inject PointsSystem Points;

<PageTitle>Index</PageTitle>

<div class="container">
    <div class="card text-center">
        <div class="card-body">
            <button style="@CountdownTimer.ButtonColor" class="btn btn-primary mt-3" @onclick=@(() => { CountdownTimer.TimerButton(); wordGeneration.NextWord(); }) > @CountdownTimer.TimerText </button>
            <h1 class="card-title">@wordGeneration.wordToGuess</h1>
            <div class="card-text">
                @foreach (var word in wordGeneration.words)
                {
                    <div class="word">@word</div>
                }
            </div>
            <button class="btn btn-primary mt-3" @onclick="wordGeneration.NextWord">Skip word</button>
            <button class="btn btn-primary mt-3" @onclick=@(() => { Points.GainPoints(); wordGeneration.NextWord(); })>CORRECT</button>
            <div style="font-size: 2rem; font-weight: bold; margin-top: 1rem;">Points: @Points.Points</div>
        </div>
    </div>
</div>
<style>
    .container {
        margin: 50px auto;
        max-width: 500px;
    }
    .card {
        border: none;
        border-radius: 10px;
        box-shadow: 0px 0px 10px rgba(0, 0, 0, 0.2);
    }
    .card-title {
        font-size: 3rem;
        font-weight: bold;
        margin-bottom: 1rem;
        margin-top: 1rem;
    }
    .word {
        display: inline-block;
        background-color: #f2f2f2;
        border-radius: 20px;
        padding: 5px 10px;
        margin: 5px;
        font-size: 1.2rem;
    }
    .btn {
        border-radius: 20px;
        padding: 10px 20px;
        font-size: 1.2rem;
    }
</style>

@code
{
    private Timer _timer;
    protected override void OnInitialized()
    {
        wordGeneration.NextWord();
        _timer = new Timer(1000);
        _timer.Elapsed += OnTimerElapsed;
        _timer.Start();
    }
    private void OnTimerElapsed(object? sender, ElapsedEventArgs e) => InvokeAsync(StateHasChanged);
}